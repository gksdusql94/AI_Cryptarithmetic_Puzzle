# -*- coding: utf-8 -*-
"""Cryptarithmetic Puzzle Solver.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tRWUeI7_Ghe_thoua_yfEwt40KogADvg
"""

from itertools import permutations
import pandas as pd
import matplotlib.pyplot as plt

def visualize_mapping(mapping):
    """Function to visualize the mapping of letters to digits using a bar chart."""
    df = pd.DataFrame(list(mapping.items()), columns=["Letter", "Digit"])
    df = df.sort_values(by="Letter")  # Sort by letter for better visualization
    
    # Plot a bar chart to visualize the mapping
    df.plot(kind="bar", x="Letter", y="Digit", legend=False)
    plt.title("Letter to Digit Mapping")
    plt.ylabel("Digit")
    plt.xticks(rotation=0)
    plt.show()

def solve_crypt_puzzle(word1, word2, result):
    # Generate a set containing all the characters used in the puzzle
    letters = set(word1 + word2 + result)
    # If the number of unique characters is more than 10, the input is invalid
    if len(letters) > 10:
        print("Invalid input: More than 10 unique characters")
        return

    # Iterate over all permutations of numbers from 0 to 9
    for perm in permutations(range(10), len(letters)):
        # Create a mapping between characters and numbers
        mapping = dict(zip(letters, perm))
        # If 0 is assigned to the first character of any word, it's not valid
        if mapping[word1[0]] == 0 or mapping[word2[0]] == 0 or mapping[result[0]] == 0:
            continue

        # Convert each character to a number
        val1 = sum(mapping[char] * (10 ** (len(word1) - i - 1)) for i, char in enumerate(word1))
        val2 = sum(mapping[char] * (10 ** (len(word2) - i - 1)) for i, char in enumerate(word2))
        res = sum(mapping[char] * (10 ** (len(result) - i - 1)) for i, char in enumerate(result))

        # If the operation satisfies the condition, print the mapping and visualize it
        if val1 + val2 == res:
            print(f"Solution found: {word1} + {word2} = {result}")
            for letter, value in mapping.items():
                print(f"{letter} = {value}")
            
            # Visualize the mapping
            visualize_mapping(mapping)
            print()

# Input from the user
operand1 = input("Enter line 1> ").upper()
operand2 = input("Enter line 2> ").upper()
result = input("Enter line 3> ").upper()

print("Solutions:")
solve_crypt_puzzle(operand1, operand2, result)
